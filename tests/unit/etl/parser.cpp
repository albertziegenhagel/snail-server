
#include <array>

#include <gtest/gtest.h>

#include <snail/etl/parser/buffer.hpp>

#include <snail/etl/parser/trace_headers/event_header_trace.hpp>
#include <snail/etl/parser/trace_headers/full_header_trace.hpp>
#include <snail/etl/parser/trace_headers/perfinfo_trace.hpp>
#include <snail/etl/parser/trace_headers/system_trace.hpp>

#include <snail/etl/parser/records/kernel/config.hpp>
#include <snail/etl/parser/records/kernel/header.hpp>
#include <snail/etl/parser/records/kernel/image.hpp>
#include <snail/etl/parser/records/kernel/perfinfo.hpp>
#include <snail/etl/parser/records/kernel/process.hpp>
#include <snail/etl/parser/records/kernel/stackwalk.hpp>
#include <snail/etl/parser/records/kernel/thread.hpp>

#include <snail/etl/parser/records/kernel_trace_control/image_id.hpp>
#include <snail/etl/parser/records/kernel_trace_control/system_config_ex.hpp>

#include <snail/etl/parser/records/visual_studio/diagnostics_hub.hpp>

using namespace snail;

TEST(EtlParser, WmiBufferHeader)
{
    const std::array<std::uint8_t, 72> buffer = {
        0x00, 0x00, 0x01, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb8, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto buffer_header = etl::parser::wmi_buffer_header_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(buffer_header.wnode().buffer_size(), 65536);
    EXPECT_EQ(buffer_header.wnode().saved_offset(), 440);
    EXPECT_EQ(buffer_header.wnode().current_offset(), 0);
    EXPECT_EQ(buffer_header.wnode().reference_count(), 0);
    EXPECT_EQ(buffer_header.wnode().timestamp(), 0);
    EXPECT_EQ(buffer_header.wnode().sequence_number(), 0);
    EXPECT_EQ(buffer_header.wnode().clock(), 0);
    EXPECT_EQ(buffer_header.wnode().client_context().processor_index(), 0);
    EXPECT_EQ(buffer_header.wnode().client_context().logger_id(), 0);
    EXPECT_EQ(buffer_header.wnode().state(), etl::parser::etw_buffer_state::free_);
    EXPECT_EQ(buffer_header.offset(), 440);
    EXPECT_EQ(buffer_header.buffer_flag(), 1);
    EXPECT_EQ(buffer_header.buffer_type(), etl::parser::etw_buffer_type::header);
    EXPECT_EQ(buffer_header.start_time(), 0);
    EXPECT_EQ(buffer_header.start_perf_clock(), 0);
}

TEST(EtlParser, SystemTraceHeader)
{
    const std::array<std::uint8_t, 32> buffer = {
        0x02, 0x00, 0x02, 0xc0, 0x6c, 0x01, 0x00, 0x00, 0x78, 0x47, 0x00, 0x00, 0x44, 0x4c, 0x00, 0x00,
        0x85, 0xcc, 0x05, 0x42, 0xcb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto trace_header = etl::parser::system_trace_header_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(trace_header.version(), 2);
    EXPECT_EQ(trace_header.header_type(), etl::parser::trace_header_type::system64);
    EXPECT_EQ(trace_header.header_flags(), etl::parser::generic_trace_marker::trace_header_flag | etl::parser::generic_trace_marker::trace_header_event_trace_flag);
    EXPECT_EQ(trace_header.packet().size(), 364);
    EXPECT_EQ(trace_header.packet().type(), 0);
    EXPECT_EQ(trace_header.packet().group(), etl::parser::event_trace_group::header);
    EXPECT_EQ(trace_header.thread_id(), 18296);
    EXPECT_EQ(trace_header.process_id(), 19524);
    EXPECT_EQ(trace_header.system_time(), 3072009292933);
    EXPECT_EQ(trace_header.kernel_time(), 0);
    EXPECT_EQ(trace_header.user_time(), 0);
}

TEST(EtlParser, PerfInfoTraceHeader)
{
    const std::array<std::uint8_t, 16> buffer = {
        0x02, 0x00, 0x11, 0xc0, 0x20, 0x00, 0x2e, 0x0f, 0x6d, 0x11, 0x06, 0x42, 0xcb, 0x02, 0x00, 0x00};

    const auto trace_header = etl::parser::perfinfo_trace_header_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(trace_header.version(), 2);
    EXPECT_EQ(trace_header.header_type(), etl::parser::trace_header_type::perfinfo64);
    EXPECT_EQ(trace_header.header_flags(), etl::parser::generic_trace_marker::trace_header_flag | etl::parser::generic_trace_marker::trace_header_event_trace_flag);
    EXPECT_EQ(trace_header.packet().size(), 32);
    EXPECT_EQ(trace_header.packet().type(), 46);
    EXPECT_EQ(trace_header.packet().group(), etl::parser::event_trace_group::perfinfo);
    EXPECT_FALSE(trace_header.has_ext_pebs());
    EXPECT_EQ(trace_header.ext_pmc_count(), 0);
}

TEST(EtlParser, PerfInfoTraceHeaderExtPmc)
{
    const std::array<std::uint8_t, 32> buffer = {
        0x04, 0x02, 0x11, 0xc0, 0x38, 0x00, 0x24, 0x05, 0xff, 0x2e, 0xfc, 0xcd, 0x61, 0x01, 0x00, 0x00,
        0x38, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto trace_header = etl::parser::perfinfo_trace_header_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(trace_header.version(), 4);
    EXPECT_EQ(trace_header.header_type(), etl::parser::trace_header_type::perfinfo64);
    EXPECT_EQ(trace_header.header_flags(), etl::parser::generic_trace_marker::trace_header_flag | etl::parser::generic_trace_marker::trace_header_event_trace_flag);
    EXPECT_EQ(trace_header.packet().size(), 56);
    EXPECT_EQ(trace_header.packet().type(), 36);
    EXPECT_EQ(trace_header.packet().group(), etl::parser::event_trace_group::thread);
    EXPECT_FALSE(trace_header.has_ext_pebs());
    EXPECT_EQ(trace_header.ext_pmc_count(), 2);
    EXPECT_EQ(trace_header.ext_pmc(0), 3896);
    EXPECT_EQ(trace_header.ext_pmc(1), 9400);
}

TEST(EtlParser, PerfInfoTraceHeaderExtPebsExtPmc)
{
    // NOTE: This has been created artificially and is not a buffer taken from an actual ETL file.
    const std::array<std::uint8_t, 40> buffer = {
        0x04, 0x82, 0x11, 0xc0, 0x38, 0x00, 0x24, 0x05, 0xff, 0x2e, 0xfc, 0xcd, 0x61, 0x01, 0x00, 0x00,
        0x59, 0x45, 0xc9, 0x4f, 0xf7, 0x7f, 0x00, 0x00,
        0x38, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto trace_header = etl::parser::perfinfo_trace_header_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(trace_header.version(), 4);
    EXPECT_EQ(trace_header.header_type(), etl::parser::trace_header_type::perfinfo64);
    EXPECT_EQ(trace_header.header_flags(), etl::parser::generic_trace_marker::trace_header_flag | etl::parser::generic_trace_marker::trace_header_event_trace_flag);
    EXPECT_EQ(trace_header.packet().size(), 56);
    EXPECT_EQ(trace_header.packet().type(), 36);
    EXPECT_EQ(trace_header.packet().group(), etl::parser::event_trace_group::thread);
    EXPECT_TRUE(trace_header.has_ext_pebs());
    EXPECT_EQ(trace_header.ext_pebs(), 0x0000'7ff7'4fc9'4559);
    EXPECT_EQ(trace_header.ext_pmc_count(), 2);
    EXPECT_EQ(trace_header.ext_pmc(0), 3896);
    EXPECT_EQ(trace_header.ext_pmc(1), 9400);
}

TEST(EtlParser, FullHeaderTraceHeader)
{
    const std::array<std::uint8_t, 48> buffer = {
        0x84, 0x01, 0x14, 0xc0, 0x40, 0x00, 0x00, 0x00, 0x20, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x1c, 0x18, 0x06, 0x42, 0xcb, 0x02, 0x00, 0x00, 0xd7, 0x75, 0xe6, 0xb3, 0x54, 0x25, 0x18, 0x4f,
        0x83, 0x0b, 0x27, 0x62, 0x73, 0x25, 0x60, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto trace_header = etl::parser::full_header_trace_header_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(trace_header.size(), 388);
    EXPECT_EQ(trace_header.header_type(), etl::parser::trace_header_type::full_header64);
    EXPECT_EQ(trace_header.header_flags(), etl::parser::generic_trace_marker::trace_header_flag | etl::parser::generic_trace_marker::trace_header_event_trace_flag);
    EXPECT_EQ(trace_header.trace_class().type(), 64);
    EXPECT_EQ(trace_header.trace_class().level(), 0);
    EXPECT_EQ(trace_header.trace_class().version(), 0);
    EXPECT_EQ(trace_header.thread_id(), 26400);
    EXPECT_EQ(trace_header.process_id(), 0);
    EXPECT_EQ(trace_header.timestamp(), 3072009312284);
    EXPECT_EQ(trace_header.guid().instantiate(), (common::guid{
                                                     0xb3e6'75d7, 0x2554, 0x4f18, {0x83, 0x0b, 0x27, 0x62, 0x73, 0x25, 0x60, 0xde}
    }));
    EXPECT_EQ(trace_header.processor_time(), 0);
}

TEST(EtlParser, EventHeaderTraceHeader)
{
    const std::array<std::uint8_t, 80> buffer = {
        0x64, 0x00, 0x13, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb1, 0x76, 0xf1, 0x43, 0xcb, 0x02, 0x00, 0x00, 0x46, 0x90, 0x5f, 0x9e, 0xc6, 0x43, 0x62, 0x4f,
        0xba, 0x13, 0x7b, 0x19, 0x89, 0x62, 0x53, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto trace_header = etl::parser::event_header_trace_header_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(trace_header.size(), 100);
    EXPECT_EQ(trace_header.header_type(), etl::parser::trace_header_type::event_header64);
    EXPECT_EQ(trace_header.header_flags(), etl::parser::generic_trace_marker::trace_header_flag | etl::parser::generic_trace_marker::trace_header_event_trace_flag);
    EXPECT_EQ(trace_header.flags(), 0);
    EXPECT_EQ(trace_header.event_property(), 0);
    EXPECT_EQ(trace_header.thread_id(), 0);
    EXPECT_EQ(trace_header.process_id(), 0);
    EXPECT_EQ(trace_header.timestamp(), 3072041514673);
    EXPECT_EQ(trace_header.provider_id().instantiate(), (common::guid{
                                                            0x9e5f'9046, 0x43c6, 0x4f62, {0xba, 0x13, 0x7b, 0x19, 0x89, 0x62, 0x53, 0xff}
    }));
    EXPECT_EQ(trace_header.event_descriptor().id(), 6);
    EXPECT_EQ(trace_header.event_descriptor().version(), 0);
    EXPECT_EQ(trace_header.event_descriptor().channel(), 0);
    EXPECT_EQ(trace_header.event_descriptor().level(), 0);
    EXPECT_EQ(trace_header.event_descriptor().opcode(), 0);
    EXPECT_EQ(trace_header.event_descriptor().task(), 0);
    EXPECT_EQ(trace_header.event_descriptor().keyword(), 0);
    EXPECT_EQ(trace_header.processor_time(), 0);
    EXPECT_EQ(trace_header.activity_id().instantiate(), (common::guid{
                                                            0x0000'0000, 0x0000, 0x0000, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
    }));
}

TEST(EtlParser, Kernel_EventTraceV2HeaderEventView)
{
    const std::array<std::uint8_t, 332> buffer = {
        0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x01, 0x05, 0x5d, 0x58, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x3b, 0xae, 0x57, 0x29, 0x8d, 0x1e, 0xd9, 0x01, 0x5a, 0x62, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x01, 0x00, 0xea, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xf8, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xff, 0xff, 0xff, 0x40, 0x00, 0x74, 0x00,
        0x7a, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x2e, 0x00, 0x64, 0x00, 0x6c, 0x00, 0x6c, 0x00,
        0x2c, 0x00, 0x2d, 0x00, 0x33, 0x00, 0x32, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
        0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x40, 0x00, 0x74, 0x00, 0x7a, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x2e, 0x00, 0x64, 0x00,
        0x6c, 0x00, 0x6c, 0x00, 0x2c, 0x00, 0x2d, 0x00, 0x33, 0x00, 0x32, 0x00, 0x31, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xc4, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x8a, 0x05, 0xfc, 0xc1, 0x1b, 0xd9, 0x01,
        0x80, 0x96, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x61, 0xe7, 0x1b, 0x8d, 0x1e, 0xd9, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6f, 0x00,
        0x67, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x6d, 0x00, 0x75, 0x00,
        0x6c, 0x00, 0x74, 0x00, 0x69, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x20, 0x00, 0x66, 0x00,
        0x69, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5d, 0x00, 0x00, 0x00};

    const auto event = etl::parser::event_trace_v2_header_event_view(std::as_bytes(std::span(buffer)));

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.buffer_size(), 65536);
    EXPECT_EQ(event.os_version_major(), 10);
    EXPECT_EQ(event.os_version_minor(), 0);
    EXPECT_EQ(event.sp_version_major(), 1);
    EXPECT_EQ(event.sp_version_minor(), 5);
    EXPECT_EQ(event.provider_version(), 22621);
    EXPECT_EQ(event.number_of_processors(), 8);
    EXPECT_EQ(event.end_time(), 133171255616974395ULL);
    EXPECT_EQ(event.timer_resolution(), 156250);
    EXPECT_EQ(event.max_file_size(), 0);
    EXPECT_EQ(event.log_file_mode(), 65537);
    EXPECT_EQ(event.buffers_written(), 490);
    EXPECT_EQ(event.start_buffers(), 1);
    EXPECT_EQ(event.pointer_size(), 8);
    EXPECT_EQ(event.events_lost(), 0);
    EXPECT_EQ(event.cpu_speed(), 2808);
    EXPECT_EQ(event.logger_name(), 0);
    EXPECT_EQ(event.log_file_name(), 0);
    EXPECT_EQ(event.time_zone_information().bias(), -60);
    EXPECT_EQ(event.time_zone_information().standard_name(), std::u16string(u"@tzres.dll,-322"));
    EXPECT_EQ(event.time_zone_information().standard_date().year(), 0);
    EXPECT_EQ(event.time_zone_information().standard_date().month(), 10);
    EXPECT_EQ(event.time_zone_information().standard_date().day_of_week(), 0);
    EXPECT_EQ(event.time_zone_information().standard_date().day(), 5);
    EXPECT_EQ(event.time_zone_information().standard_date().hour(), 3);
    EXPECT_EQ(event.time_zone_information().standard_date().minute(), 0);
    EXPECT_EQ(event.time_zone_information().standard_date().second(), 0);
    EXPECT_EQ(event.time_zone_information().standard_date().milliseconds(), 0);
    EXPECT_EQ(event.time_zone_information().standard_bias(), 0);
    EXPECT_EQ(event.time_zone_information().daylight_name(), std::u16string(u"@tzres.dll,-321"));
    EXPECT_EQ(event.time_zone_information().daylight_date().year(), 0);
    EXPECT_EQ(event.time_zone_information().daylight_date().month(), 3);
    EXPECT_EQ(event.time_zone_information().daylight_date().day_of_week(), 0);
    EXPECT_EQ(event.time_zone_information().daylight_date().day(), 5);
    EXPECT_EQ(event.time_zone_information().daylight_date().hour(), 2);
    EXPECT_EQ(event.time_zone_information().daylight_date().minute(), 0);
    EXPECT_EQ(event.time_zone_information().daylight_date().second(), 0);
    EXPECT_EQ(event.time_zone_information().daylight_date().milliseconds(), 0);
    EXPECT_EQ(event.time_zone_information().daylight_bias(), -60);
    EXPECT_EQ(event.boot_time(), 133168183955000000ULL);
    EXPECT_EQ(event.perf_freq(), 10000000);
    EXPECT_EQ(event.start_time(), 133171255391510931ULL);
    EXPECT_EQ(event.reserved_flags(), 1);
    EXPECT_EQ(event.buffers_lost(), 0);
    EXPECT_EQ(event.session_name(), std::u16string(u"Relogger"));
    EXPECT_EQ(event.file_name(), std::u16string(u"[multiple files]"));
}

TEST(EtlParser, Kernel_PerfinfoV2SampledProfileEventView)
{
    const std::array<std::uint8_t, 16> buffer = {
        0x8a, 0x35, 0x01, 0x2e, 0x03, 0xf8, 0xff, 0xff, 0x20, 0x67, 0x00, 0x00, 0x01, 0x00, 0x48, 0x00};

    const auto event = etl::parser::perfinfo_v2_sampled_profile_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.instruction_pointer(), 18446735291273262474ULL);
    EXPECT_EQ(event.thread_id(), 26400);
    EXPECT_EQ(event.count(), 1);
    EXPECT_EQ(event.reserved(), 72);
}

TEST(EtlParser, Kernel_PerfinfoV2SampledProfileIntervalEventView)
{
    const std::array<std::uint8_t, 24> buffer = {
        0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x54, 0x00, 0x69, 0x00,
        0x6d, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00};

    const auto event = etl::parser::perfinfo_v3_sampled_profile_interval_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.source(), 0);
    EXPECT_EQ(event.old_interval(), 10000);
    EXPECT_EQ(event.new_interval(), 10000);
    EXPECT_EQ(event.source_name(), std::u16string(u"Timer"));
}

TEST(EtlParser, Kernel_StackwalkV2StackEventView)
{
    const std::array<std::uint8_t, 120> buffer = {
        0x39, 0xc8, 0x26, 0x42, 0xcb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x40, 0xc6, 0x31, 0x62, 0x03, 0xf8, 0xff, 0xff, 0x8d, 0xc9, 0x31, 0x62, 0x03, 0xf8, 0xff, 0xff,
        0xf7, 0x8e, 0x30, 0x62, 0x03, 0xf8, 0xff, 0xff, 0x3c, 0xf1, 0x30, 0x62, 0x03, 0xf8, 0xff, 0xff,
        0xfe, 0xe2, 0x30, 0x62, 0x03, 0xf8, 0xff, 0xff, 0xaa, 0x2c, 0x00, 0x3f, 0x03, 0xf8, 0xff, 0xff,
        0x81, 0xd3, 0x25, 0x5c, 0x03, 0xf8, 0xff, 0xff, 0xc1, 0xe2, 0xf4, 0x5b, 0x03, 0xf8, 0xff, 0xff,
        0xf9, 0x2f, 0xf3, 0x5b, 0x03, 0xf8, 0xff, 0xff, 0x36, 0x3f, 0x00, 0x3f, 0x03, 0xf8, 0xff, 0xff,
        0xba, 0x99, 0x0b, 0x2e, 0x03, 0xf8, 0xff, 0xff, 0xc4, 0x91, 0x0b, 0x2e, 0x03, 0xf8, 0xff, 0xff,
        0xfe, 0xd4, 0x22, 0x2e, 0x03, 0xf8, 0xff, 0xff};

    const auto event = etl::parser::stackwalk_v2_stack_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.event_timestamp(), 3072011454521);
    EXPECT_EQ(event.process_id(), 0);
    EXPECT_EQ(event.thread_id(), 0);
    EXPECT_EQ(event.stack_size(), 13);
    EXPECT_EQ(event.stack_address(0), 18446735292148860480ULL);
    EXPECT_EQ(event.stack_address(1), 18446735292148861325ULL);
    EXPECT_EQ(event.stack_address(2), 18446735292148780791ULL);
    EXPECT_EQ(event.stack_address(3), 18446735292148805948ULL);
    EXPECT_EQ(event.stack_address(4), 18446735292148802302ULL);
    EXPECT_EQ(event.stack_address(5), 18446735291558407338ULL);
    EXPECT_EQ(event.stack_address(6), 18446735292047414145ULL);
    EXPECT_EQ(event.stack_address(7), 18446735292044206785ULL);
    EXPECT_EQ(event.stack_address(8), 18446735292044095481ULL);
    EXPECT_EQ(event.stack_address(9), 18446735291558412086ULL);
    EXPECT_EQ(event.stack_address(10), 18446735291273943482ULL);
    EXPECT_EQ(event.stack_address(11), 18446735291273941444ULL);
    EXPECT_EQ(event.stack_address(12), 18446735291275465982ULL);

    const auto stack       = event.stack();
    const auto stack_begin = stack.begin();
    const auto stack_end   = stack.end();

    EXPECT_TRUE(stack_begin == stack_begin);
    EXPECT_TRUE(stack_end == stack_end);
    EXPECT_FALSE(stack_begin == stack_end);

    EXPECT_FALSE(stack_begin != stack_begin);
    EXPECT_FALSE(stack_end != stack_end);
    EXPECT_TRUE(stack_begin != stack_end);

    EXPECT_FALSE(stack_begin < stack_begin);
    EXPECT_FALSE(stack_end < stack_end);
    EXPECT_TRUE(stack_begin < stack_end);
    EXPECT_FALSE(stack_end < stack_begin);

    EXPECT_TRUE(stack_begin <= stack_begin);
    EXPECT_TRUE(stack_end <= stack_end);
    EXPECT_TRUE(stack_begin < stack_end);
    EXPECT_FALSE(stack_end < stack_begin);

    EXPECT_FALSE(stack_begin > stack_begin);
    EXPECT_FALSE(stack_end > stack_end);
    EXPECT_FALSE(stack_begin > stack_end);
    EXPECT_TRUE(stack_end > stack_begin);

    EXPECT_TRUE(stack_begin >= stack_begin);
    EXPECT_TRUE(stack_end >= stack_end);
    EXPECT_FALSE(stack_begin > stack_end);
    EXPECT_TRUE(stack_end > stack_begin);

    auto iter = stack_begin;
    EXPECT_EQ(*iter, 18446735292148860480ULL);
    auto iter2 = ++iter;
    EXPECT_EQ(*iter, 18446735292148861325ULL);
    EXPECT_EQ(*iter2, 18446735292148861325ULL);
    auto iter3 = iter++;
    EXPECT_EQ(*iter, 18446735292148780791ULL);
    EXPECT_EQ(*iter3, 18446735292148861325ULL);

    auto iter4 = --iter;
    EXPECT_EQ(*iter, 18446735292148861325ULL);
    EXPECT_EQ(*iter4, 18446735292148861325ULL);
    auto iter5 = iter--;
    EXPECT_EQ(*iter, 18446735292148860480ULL);
    EXPECT_EQ(*iter5, 18446735292148861325ULL);

    iter += 5;
    EXPECT_EQ(*iter, 18446735291558407338ULL);
    iter -= 2;
    EXPECT_EQ(*iter, 18446735292148805948ULL);

    auto iter6 = iter + 4;
    EXPECT_EQ(*iter, 18446735292148805948ULL);
    EXPECT_EQ(*iter6, 18446735292044206785ULL);

    auto iter7 = iter - 2;
    EXPECT_EQ(*iter, 18446735292148805948ULL);
    EXPECT_EQ(*iter7, 18446735292148861325ULL);
}

TEST(EtlParser, Kernel_ImageV2LoadEventView)
{
    const std::array<std::uint8_t, 124> buffer = {
        0x00, 0x00, 0xe0, 0x2d, 0x03, 0xf8, 0xff, 0xff, 0x00, 0x70, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x57, 0xe4, 0xb7, 0x00, 0x93, 0x5a, 0x7b, 0xf5, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00,
        0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x52, 0x00, 0x6f, 0x00, 0x6f, 0x00, 0x74, 0x00, 0x5c, 0x00,
        0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x33, 0x00, 0x32, 0x00,
        0x5c, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x6b, 0x00, 0x72, 0x00, 0x6e, 0x00,
        0x6c, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00};

    const auto event = etl::parser::image_v3_load_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.image_base(), 18446735291271086080ULL);
    EXPECT_EQ(event.image_size(), 17068032);
    EXPECT_EQ(event.process_id(), 0);
    EXPECT_EQ(event.image_checksum(), 12051543);
    EXPECT_EQ(event.time_date_stamp(), 4118502035);
    EXPECT_EQ(event.signature_level(), 0);
    EXPECT_EQ(event.signature_type(), 1);
    EXPECT_EQ(event.default_base(), 0);
    EXPECT_EQ(event.file_name(), std::u16string(u"\\SystemRoot\\system32\\ntoskrnl.exe"));
}

TEST(EtlParser, Kernel_ProcessV4TypeGroup1EventView)
{
    const std::array<std::uint8_t, 179> buffer = {
        0xc0, 0x80, 0x2a, 0x5b, 0x01, 0xbf, 0xff, 0xff, 0x70, 0x25, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x40, 0x3d, 0xc4, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xc0, 0xab, 0xec, 0xd2, 0x0d, 0xd0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x12, 0x00, 0x00, 0x00,
        0x57, 0x6d, 0x69, 0x50, 0x72, 0x76, 0x53, 0x45, 0x2e, 0x65, 0x78, 0x65, 0x00, 0x43, 0x00, 0x3a,
        0x00, 0x5c, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x44, 0x00, 0x4f, 0x00, 0x57, 0x00, 0x53,
        0x00, 0x5c, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x33,
        0x00, 0x32, 0x00, 0x5c, 0x00, 0x77, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x5c, 0x00, 0x77,
        0x00, 0x6d, 0x00, 0x69, 0x00, 0x70, 0x00, 0x72, 0x00, 0x76, 0x00, 0x73, 0x00, 0x65, 0x00, 0x2e,
        0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x20, 0x00, 0x2d, 0x00, 0x45, 0x00, 0x6d, 0x00, 0x62,
        0x00, 0x65, 0x00, 0x64, 0x00, 0x64, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00};

    const auto event = etl::parser::process_v4_type_group1_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.unique_process_key(), 18446672611278225600ULL);
    EXPECT_EQ(event.process_id(), 9584);
    EXPECT_EQ(event.parent_id(), 1152);
    EXPECT_EQ(event.session_id(), 0);
    EXPECT_EQ(event.exit_status(), 259);
    EXPECT_EQ(event.directory_table_base(), 7587315712);
    EXPECT_EQ(event.flags(), 0);

    EXPECT_TRUE(event.has_sid());
    EXPECT_EQ(event.user_sid_token_user(), (std::array<std::uint64_t, 2>{0xffff'd00d'd2ec'abc0, 0}));
    EXPECT_EQ(event.user_sid().revision(), 1);
    EXPECT_EQ(event.user_sid().sub_authority_count(), 1);
    // EXPECT_EQ(event.user_sid().identifier_authority(), 0);
    // EXPECT_EQ(event.user_sid().sub_authority(), 1);

    EXPECT_EQ(event.image_filename(), std::string("WmiPrvSE.exe"));
    EXPECT_EQ(event.command_line(), std::u16string(u"C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe -Embedding"));
    EXPECT_EQ(event.package_full_name(), std::u16string(u""));
    EXPECT_EQ(event.application_id(), std::u16string(u""));
}

TEST(EtlParser, Kernel_ThreadV3TypeGroup1EventView)
{
    const std::array<std::uint8_t, 96> buffer = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x45, 0x30, 0x03, 0xf8, 0xff, 0xff,
        0x00, 0x40, 0x45, 0x30, 0x03, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x60, 0xd4, 0x22, 0x2e, 0x03, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x49, 0x00, 0x64, 0x00, 0x6c, 0x00, 0x65, 0x00,
        0x20, 0x00, 0x54, 0x00, 0x68, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x00, 0x00};

    const auto event = etl::parser::thread_v3_type_group1_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.process_id(), 0);
    EXPECT_EQ(event.thread_id(), 0);
    EXPECT_EQ(event.stack_base(), 18446735291311304704ULL);
    EXPECT_EQ(event.stack_limit(), 18446735291311276032ULL);
    EXPECT_EQ(event.user_stack_base(), 0);
    EXPECT_EQ(event.user_stack_limit(), 0);
    EXPECT_EQ(event.affinity(), 1);
    EXPECT_EQ(event.win32_start_addr(), 18446735291275465824ULL);
    EXPECT_EQ(event.teb_base(), 0);
    EXPECT_EQ(event.sub_process_tag(), 0);
    EXPECT_EQ(event.base_priority(), 0);
    EXPECT_EQ(event.page_priority(), 5);
    EXPECT_EQ(event.io_priority(), 0);
    EXPECT_EQ(event.flags(), 0);
    ASSERT_NE(event.thread_name(), std::nullopt);
    EXPECT_EQ(*event.thread_name(), std::u16string(u"Idle Thread"));
}

TEST(EtlParser, Kernel_ThreadV4TypeGroup1EventView)
{
    const std::array<std::uint8_t, 96> buffer = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x45, 0x30, 0x03, 0xf8, 0xff, 0xff,
        0x00, 0x40, 0x45, 0x30, 0x03, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x60, 0xd4, 0x22, 0x2e, 0x03, 0xf8, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x49, 0x00, 0x64, 0x00, 0x6c, 0x00, 0x65, 0x00,
        0x20, 0x00, 0x54, 0x00, 0x68, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x00, 0x00};

    const auto event = etl::parser::thread_v4_type_group1_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.process_id(), 0);
    EXPECT_EQ(event.thread_id(), 0);
    EXPECT_EQ(event.stack_base(), 18446735291311304704ULL);
    EXPECT_EQ(event.stack_limit(), 18446735291311276032ULL);
    EXPECT_EQ(event.user_stack_base(), 0);
    EXPECT_EQ(event.user_stack_limit(), 0);
    EXPECT_EQ(event.affinity(), 1);
    EXPECT_EQ(event.win32_start_addr(), 18446735291275465824ULL);
    EXPECT_EQ(event.teb_base(), 0);
    EXPECT_EQ(event.sub_process_tag(), 0);
    EXPECT_EQ(event.base_priority(), 0);
    EXPECT_EQ(event.page_priority(), 5);
    EXPECT_EQ(event.io_priority(), 0);
    EXPECT_EQ(event.flags(), 0);
    EXPECT_EQ(event.thread_name(), std::u16string(u"Idle Thread"));
}

TEST(EtlParser, Kernel_ThreadV2SetNameEventView)
{
    const std::array<std::uint8_t, 70> buffer = {
        0x0c, 0x4f, 0x00, 0x00, 0x4c, 0x48, 0x00, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x70, 0x00,
        0x74, 0x00, 0x79, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x6e, 0x00, 0x65, 0x00, 0x63, 0x00,
        0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x20, 0x00, 0x4f, 0x00, 0x75, 0x00, 0x74, 0x00,
        0x70, 0x00, 0x75, 0x00, 0x74, 0x00, 0x20, 0x00, 0x54, 0x00, 0x68, 0x00, 0x72, 0x00, 0x65, 0x00,
        0x61, 0x00, 0x64, 0x00, 0x00, 0x00};

    const auto event = etl::parser::thread_v2_set_name_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.process_id(), 20236);
    EXPECT_EQ(event.thread_id(), 18508);
    EXPECT_EQ(event.thread_name(), std::u16string(u"ConptyConnection Output Thread"));
}

TEST(EtlParser, Kernel_SystemConfigV3CpuEventView)
{
    const std::array<std::uint8_t, 828> buffer = {
        0xf8, 0x0a, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x6c, 0x3f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
        0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x7f, 0x00, 0x00,
        0x09, 0x00, 0x06, 0x00, 0x09, 0x9e, 0x01, 0x01, 0x6b, 0x0a, 0x00, 0x00};

    const auto event = etl::parser::system_config_v3_cpu_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.mhz(), 2808);
    EXPECT_EQ(event.number_of_processors(), 8);
    EXPECT_EQ(event.mem_size(), 16236);
    EXPECT_EQ(event.page_size(), 4096);
    EXPECT_EQ(event.allocation_granularity(), 65536);
    EXPECT_EQ(event.computer_name(), std::u16string(u"DESKTOP"));
    EXPECT_EQ(event.domain_name(), std::u16string(u""));
    EXPECT_EQ(event.hyper_threading_flag(), 0xFF);
    EXPECT_EQ(event.highest_user_address(), 0x7FFF'FFFE'FFFF);
    EXPECT_EQ(event.processor_architecture(), 9);
    EXPECT_EQ(event.processor_level(), 6);
    EXPECT_EQ(event.processor_revision(), 40457);
    EXPECT_EQ(event.pae_enabled(), 1);
    EXPECT_EQ(event.nx_enabled(), 1);
    EXPECT_EQ(event.memory_speed(), 2667);
}

TEST(EtlParser, Kernel_SystemConfigV2PhysicalDiskEventView)
{
    const std::array<std::uint8_t, 568> buffer = {
        0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
        0x23, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x00, 0x69, 0x00, 0x72, 0x00, 0x74, 0x00,
        0x75, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x20, 0x00, 0x48, 0x00, 0x44, 0x00, 0x20, 0x00, 0x41, 0x00,
        0x54, 0x00, 0x41, 0x00, 0x20, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x43, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto event = etl::parser::system_config_v2_physical_disk_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.disk_number(), 1);
    EXPECT_EQ(event.bytes_per_sector(), 512);
    EXPECT_EQ(event.sectors_per_track(), 63);
    EXPECT_EQ(event.tracks_per_cylinder(), 255);
    EXPECT_EQ(event.cylinders(), 1827);
    EXPECT_EQ(event.scsi_port(), 0);
    EXPECT_EQ(event.scsi_path(), 0);
    EXPECT_EQ(event.scsi_target(), 1);
    EXPECT_EQ(event.scsi_lun(), 0);
    EXPECT_EQ(event.manufacturer(), std::u16string(u"Virtual HD ATA Device"));
    EXPECT_EQ(event.partition_count(), 1);
    EXPECT_EQ(event.write_cache_enabled(), 1);
    EXPECT_EQ(event.boot_drive_letter(), std::u16string(u"C"));
    EXPECT_EQ(event.spare(), std::u16string(u""));
}

TEST(EtlParser, Kernel_SystemConfigV2LogicalDiskEventView)
{
    const std::array<std::uint8_t, 112> buffer = {
        0x00, 0x00, 0x50, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0x3f, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3a, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x54, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x0b, 0xfe, 0x03, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x46, 0x00, 0x53, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    const auto event = etl::parser::system_config_v2_logical_disk_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.start_offset(), 525336576);
    EXPECT_EQ(event.partition_size(), 274353618944);
    EXPECT_EQ(event.disk_number(), 0);
    EXPECT_EQ(event.size(), 112);
    EXPECT_EQ(event.drive_type(), etl::parser::drive_type::partition);
    EXPECT_EQ(event.drive_letter(), std::u16string(u"C:"));
    EXPECT_EQ(event.partition_number(), 2);
    EXPECT_EQ(event.sectors_per_cluster(), 8);
    EXPECT_EQ(event.bytes_per_sector(), 512);
    EXPECT_EQ(event.number_of_free_clusters(), 20075734);
    EXPECT_EQ(event.total_number_of_clusters(), 66980863);
    EXPECT_EQ(event.file_system(), std::u16string(u"NTFS"));
    EXPECT_EQ(event.volume_extent(), 0);
}

TEST(EtlParser, Kernel_SystemConfigV5PnpEventView)
{
    const std::array<std::uint8_t, 388> buffer = {
        0xc3, 0x7d, 0x12, 0x50, 0x36, 0x0f, 0x5e, 0x41, 0xa6, 0xcc, 0x4c, 0xb3, 0xbe, 0x91, 0x0b, 0x65,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x00, 0x43, 0x00, 0x50, 0x00, 0x49, 0x00, 0x5c, 0x00, 0x47, 0x00, 0x45, 0x00, 0x4e, 0x00,
        0x55, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x45, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x45, 0x00,
        0x4c, 0x00, 0x5f, 0x00, 0x2d, 0x00, 0x5f, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x45, 0x00,
        0x4c, 0x00, 0x36, 0x00, 0x34, 0x00, 0x5f, 0x00, 0x46, 0x00, 0x41, 0x00, 0x4d, 0x00, 0x49, 0x00,
        0x4c, 0x00, 0x59, 0x00, 0x5f, 0x00, 0x36, 0x00, 0x5f, 0x00, 0x4d, 0x00, 0x4f, 0x00, 0x44, 0x00,
        0x45, 0x00, 0x4c, 0x00, 0x5f, 0x00, 0x31, 0x00, 0x35, 0x00, 0x38, 0x00, 0x5f, 0x00, 0x2d, 0x00,
        0x5f, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x45, 0x00, 0x4c, 0x00, 0x28, 0x00, 0x52, 0x00,
        0x29, 0x00, 0x5f, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x52, 0x00, 0x45, 0x00, 0x28, 0x00, 0x54, 0x00,
        0x4d, 0x00, 0x29, 0x00, 0x5f, 0x00, 0x49, 0x00, 0x37, 0x00, 0x2d, 0x00, 0x37, 0x00, 0x37, 0x00,
        0x30, 0x00, 0x30, 0x00, 0x48, 0x00, 0x51, 0x00, 0x5f, 0x00, 0x43, 0x00, 0x50, 0x00, 0x55, 0x00,
        0x5f, 0x00, 0x40, 0x00, 0x5f, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x38, 0x00, 0x30, 0x00, 0x47, 0x00,
        0x48, 0x00, 0x5a, 0x00, 0x5c, 0x00, 0x5f, 0x00, 0x31, 0x00, 0x00, 0x00, 0x49, 0x00, 0x6e, 0x00,
        0x74, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x63, 0x00,
        0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x00, 0x00, 0x49, 0x00, 0x6e, 0x00,
        0x74, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x28, 0x00, 0x52, 0x00, 0x29, 0x00, 0x20, 0x00, 0x43, 0x00,
        0x6f, 0x00, 0x72, 0x00, 0x65, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00, 0x20, 0x00,
        0x69, 0x00, 0x37, 0x00, 0x2d, 0x00, 0x37, 0x00, 0x37, 0x00, 0x30, 0x00, 0x30, 0x00, 0x48, 0x00,
        0x51, 0x00, 0x20, 0x00, 0x43, 0x00, 0x50, 0x00, 0x55, 0x00, 0x20, 0x00, 0x40, 0x00, 0x20, 0x00,
        0x32, 0x00, 0x2e, 0x00, 0x38, 0x00, 0x30, 0x00, 0x47, 0x00, 0x48, 0x00, 0x7a, 0x00, 0x00, 0x00,
        0x5c, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5c, 0x00,
        0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x31, 0x00, 0x38, 0x00,
        0x00, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x70, 0x00, 0x70, 0x00,
        0x6d, 0x00, 0x00, 0x00};

    const auto event = etl::parser::system_config_v5_pnp_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.class_guid().instantiate(), (common::guid{
                                                    0x5012'7DC3, 0x0F36, 0x415E, {0xA6, 0xCC, 0x4C, 0xB3, 0xBE, 0x91, 0x0B, 0x65}
    }));
    EXPECT_EQ(event.upper_filters_count(), 0);
    EXPECT_EQ(event.lower_filters_count(), 0);
    EXPECT_EQ(event.dev_status(), 25165834);
    EXPECT_EQ(event.dev_problem(), 0);
    EXPECT_EQ(event.device_id(), std::u16string(u"ACPI\\GENUINEINTEL_-_INTEL64_FAMILY_6_MODEL_158_-_INTEL(R)_CORE(TM)_I7-7700HQ_CPU_@_2.80GHZ\\_1"));
    EXPECT_EQ(event.device_description(), std::u16string(u"Intel Processor"));
    EXPECT_EQ(event.friendly_name(), std::u16string(u"Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz"));
    EXPECT_EQ(event.pdo_name(), std::u16string(u"\\Device\\00000018"));
    EXPECT_EQ(event.service_name(), std::u16string(u"intelppm"));
}

TEST(EtlParser, Xperf_ImageIdV2InfoEventView)
{
    const std::array<std::uint8_t, 50> buffer = {
        0x00, 0x00, 0xe0, 0x2d, 0x03, 0xf8, 0xff, 0xff, 0x00, 0x70, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x6b, 0x00, 0x72, 0x00,
        0x6e, 0x00, 0x6c, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00,
        0x00, 0x00};

    const auto event = etl::parser::image_id_v2_info_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.image_base(), 18446735291271086080ULL);
    EXPECT_EQ(event.image_size(), 17068032);
    EXPECT_EQ(event.process_id(), 0);
    EXPECT_EQ(event.time_date_stamp(), 0);
    EXPECT_EQ(event.original_file_name(), std::u16string(u"ntkrnlmp.exe"));
}

TEST(EtlParser, Xperf_ImageIdV2DbgIdPdbInfoEventView)
{
    const std::array<std::uint8_t, 91> buffer = {
        0x00, 0x00, 0xc7, 0x1f, 0xf7, 0x7f, 0x00, 0x00, 0x2c, 0x10, 0x00, 0x00, 0x1e, 0xed, 0x95, 0x38,
        0x02, 0xc3, 0xde, 0x41, 0xb2, 0xc3, 0x20, 0x4b, 0x23, 0x39, 0x0c, 0xd0, 0x02, 0x00, 0x00, 0x00,
        0x44, 0x3a, 0x5c, 0x61, 0x5c, 0x73, 0x6e, 0x61, 0x69, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
        0x72, 0x5c, 0x73, 0x6e, 0x61, 0x69, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x69,
        0x6e, 0x6e, 0x65, 0x72, 0x5c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x5c, 0x62, 0x75, 0x69, 0x6c, 0x64,
        0x5c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x64, 0x62, 0x00};

    const auto event = etl::parser::image_id_v2_dbg_id_pdb_info_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.process_id(), 4140);
    EXPECT_EQ(event.image_base(), 140699366785024);
    EXPECT_EQ(event.guid().instantiate(), (common::guid{
                                              0x3895'ed1e, 0xc302, 0x41de, {0xb2, 0xc3, 0x20, 0x4b, 0x23, 0x39, 0x0c, 0xd0}
    }));
    EXPECT_EQ(event.age(), 2);
    EXPECT_EQ(event.pdb_file_name(), "D:\\a\\snail-server\\snail-server\\inner\\Debug\\build\\inner.pdb");
}

TEST(EtlParser, Xperf_SysConfigExV0BuildInfoEventView)
{
    const std::array<std::uint8_t, 150> buffer = {
        0x00, 0x7e, 0xd8, 0xf7, 0x7b, 0xaa, 0xd9, 0x01, 0x32, 0x00, 0x30, 0x00, 0x33, 0x00, 0x34, 0x00,
        0x38, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x2e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x64, 0x00, 0x36, 0x00,
        0x34, 0x00, 0x66, 0x00, 0x72, 0x00, 0x65, 0x00, 0x2e, 0x00, 0x66, 0x00, 0x65, 0x00, 0x5f, 0x00,
        0x72, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x2e, 0x00,
        0x32, 0x00, 0x31, 0x00, 0x30, 0x00, 0x35, 0x00, 0x30, 0x00, 0x37, 0x00, 0x2d, 0x00, 0x31, 0x00,
        0x35, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00,
        0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x72, 0x00, 0x76, 0x00,
        0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x32, 0x00, 0x32, 0x00, 0x20, 0x00,
        0x44, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x65, 0x00, 0x6e, 0x00, 0x74, 0x00,
        0x65, 0x00, 0x72, 0x00, 0x00, 0x00};

    const auto event = etl::parser::system_config_ex_v0_build_info_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.install_date(), 133325113400000000ULL);
    EXPECT_EQ(event.build_lab(), std::u16string(u"20348.1.amd64fre.fe_release.210507-1500"));
    EXPECT_EQ(event.product_name(), std::u16string(u"Windows Server 2022 Datacenter"));
}

TEST(EtlParser, Xperf_SysConfigExV0SysPathsEventView)
{
    const std::array<std::uint8_t, 64> buffer = {
        0x43, 0x00, 0x3a, 0x00, 0x5c, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00,
        0x77, 0x00, 0x73, 0x00, 0x5c, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00,
        0x6d, 0x00, 0x33, 0x00, 0x32, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3a, 0x00, 0x5c, 0x00, 0x57, 0x00,
        0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5c, 0x00, 0x00, 0x00};

    const auto event = etl::parser::system_config_ex_v0_system_paths_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.system_directory(), std::u16string(u"C:\\Windows\\system32"));
    EXPECT_EQ(event.system_windows_directory(), std::u16string(u"C:\\Windows\\"));
}

TEST(EtlParser, Xperf_SysConfigExV0VolumeMappingEventView)
{
    const std::array<std::uint8_t, 58> buffer = {
        0x5c, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5c, 0x00,
        0x48, 0x00, 0x61, 0x00, 0x72, 0x00, 0x64, 0x00, 0x64, 0x00, 0x69, 0x00, 0x73, 0x00, 0x6b, 0x00,
        0x56, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x75, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x32, 0x00, 0x5c, 0x00,
        0x00, 0x00, 0x43, 0x00, 0x3a, 0x00, 0x5c, 0x00, 0x00, 0x00};

    const auto event = etl::parser::system_config_ex_v0_volume_mapping_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.nt_path(), std::u16string(u"\\Device\\HarddiskVolume2\\"));
    EXPECT_EQ(event.dos_path(), std::u16string(u"C:\\"));
}

TEST(EtlParser, VsDiagHub_TargetProfilingStartedV2EventView)
{
    const std::array<std::uint8_t, 16> buffer = {
        0x2c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x4e, 0x90, 0xad, 0x00, 0x00, 0x00, 0x00};

    const auto event = etl::parser::vs_diagnostics_hub_target_profiling_started_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.process_id(), 4140);
    EXPECT_EQ(event.start_reason(), etl::parser::target_start_reason::app_package_launch);
    EXPECT_EQ(event.timestamp(), 2911915703);
}

TEST(EtlParser, VsDiagHub_TargetProfilingStoppedV1EventView)
{
    const std::array<std::uint8_t, 12> buffer = {
        0x2c, 0x10, 0x00, 0x00, 0xb7, 0x4e, 0x90, 0xad, 0x00, 0x00, 0x00, 0x00};

    const auto event = etl::parser::vs_diagnostics_hub_target_profiling_stopped_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.process_id(), 4140);
    EXPECT_EQ(event.timestamp(), 2911915703);
}

TEST(EtlParser, VsDiagHub_MachineInfoV0EventView)
{
    const std::array<std::uint8_t, 64> buffer = {
        0x66, 0x00, 0x76, 0x00, 0x2d, 0x00, 0x61, 0x00, 0x7a, 0x00, 0x34, 0x00, 0x34, 0x00, 0x38, 0x00,
        0x2d, 0x00, 0x31, 0x00, 0x36, 0x00, 0x34, 0x00, 0x00, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6e, 0x00,
        0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x36, 0x00, 0x34, 0x00,
        0x2d, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x29, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00};

    const auto event = etl::parser::vs_diagnostics_hub_machine_info_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.name(), std::u16string(u"fv-az448-164"));
    EXPECT_EQ(event.os_description(), std::u16string(u"Windows (64-bit)"));
    EXPECT_EQ(event.architecture(), etl::parser::machine_architecture::amd64);
}

TEST(EtlParser, VsDiagHub_CounterInfoV0EventView)
{
    const std::array<std::uint8_t, 20> buffer = {
        0x02, 0x00, 0x00, 0x00, 0xec, 0x19, 0x64, 0xae, 0x00, 0x00, 0x00, 0x00, 0xdb, 0xb6, 0x6d, 0xdb,
        0xb6, 0x6d, 0x35, 0x40};

    const auto event = etl::parser::vs_diagnostics_hub_counter_info_event_view(std::as_bytes(std::span(buffer)), 8);

    EXPECT_EQ(event.dynamic_size(), event.buffer().size());

    EXPECT_EQ(event.counter(), etl::parser::counter_type::CPU);
    EXPECT_EQ(event.timestamp(), 2925795820);
    EXPECT_EQ(event.value(), 21.428571428571427);
}

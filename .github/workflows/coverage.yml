name: Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  job:
    name: ${{ matrix.platform }}-llvm-cov

    runs-on: ${{ matrix.run-on }}

    strategy:
      fail-fast: false
      matrix:
        run-on: [ubuntu-22.04]
        include:
          - run-on: ubuntu-22.04
            triplet: x64-linux-release
            platform: linux

    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_GIT_COMMIT_ID: "c82f74667287d3dc386bce81e44964370c91a289"

    steps:
      - name: Install gcc-13
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 --slave /usr/bin/g++ g++ /usr/bin/g++-13

      - name: Install clang-17(dev)
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main'
          sudo apt update
          sudo apt install clang-17
          echo "CC=clang-17" >> $GITHUB_ENV
          echo "CXX=clang++-17" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          lfs: 'false'

      - name: Create LFS file list
        shell: pwsh
        run: git lfs ls-files -l | ForEach-Object { $_.split(" ")[0] } | Sort-Object | Out-File .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      - name: Git LFS Pull
        run: git lfs pull

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.25.0"
          ninjaVersion: "^1.11.1"

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: "${{ env.VCPKG_GIT_COMMIT_ID }}"

      - name: Build & Test project
        uses: lukka/run-cmake@v10
        with:
          configurePreset: "coverage"
          configurePresetAdditionalArgs: "['-DCMAKE_BUILD_TYPE=Debug', '-DCMAKE_CXX_FLAGS=-gdwarf-4', '-DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}']"
          buildPreset: "coverage"
          testPreset: "coverage"

      - name: Coverage Report
        run: cmake --build ${{ github.workspace }}/build/coverage --target code_coverage_report

      - name: Coverage Export
        run: cmake --build ${{ github.workspace }}/build/coverage --target code_coverage_export_lcov

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ github.workspace }}/build/coverage/coverage.info
